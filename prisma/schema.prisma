// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  role          String?         // Add this line to store the user's role
  family        Family?         @relation(fields: [familyId], references: [id])
  familyId      String?         // Add this line for the foreign key
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdInvites Invite[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Family {
  id        String   @id @default(cuid())
  name      String   @unique
  members   User[]
  invites   Invite[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invite {
  id         String   @id @default(cuid())
  email      String
  role       String
  family     Family   @relation(fields: [familyId], references: [id])
  familyId   String
  createdBy  User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt  DateTime @default(now())
  status     String   @default("PENDING") // PENDING, ACCEPTED, REJECTED

  @@unique([email, familyId])
}